[{"path":"https://pawelqs.github.io/cevodata/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 cevodata authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://pawelqs.github.io/cevodata/articles/cevodata_construction.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"cevodata construction","text":"cevodata class data structure designed store mutational data (SNVs, CNAs), metadata, analytical results (e.g. mathematical models) cohort tumor samples.","code":""},{"path":"https://pawelqs.github.io/cevodata/articles/cevodata_construction.html","id":"cevodata-structure","dir":"Articles","previous_headings":"","what":"cevodata structure","title":"cevodata construction","text":"cevodata S3 R class following elements: metadata - tibble associates sample IDs patient IDs contains metadata patients (sex, age, molecular subtype tumor) samples (purity estimates), SNVs - list tibbles SNVs indels. Multiple tibbles can stored alternative lists variants (different variant callers, data filtering settings, etc.), CNAs - list tibbles CNAs. Multiple tibbles can stored alternative lists variants, stats - list tibbles statistics calculated sample, cumulative tails, \\(M(f) ~ 1/f\\) statistics, SFS spectra, sample-level patient level statistics models - stores models fitted cevomod. items list must objects cv_subitem class, particular model components model$info model$settings must plain tibbles patient_id sample_id columns. misc - currently used settings - list stores names default SNV CNA tibbles name active (last fitted) model object.","code":""},{"path":"https://pawelqs.github.io/cevodata/articles/cevodata_construction.html","id":"adding-data","dir":"Articles","previous_headings":"","what":"Adding data","title":"cevodata construction","text":"user interface cevomod inspired tidyverse R packages ecosystem pipe-oriented. functions accept cevodata first argument return modified cevodata. convention allows building pipelines, e.g., compose cevodata object adding new data components step step. Let’s create example cevodata object. use test_data dataset, contains SNVs, CNAs, metadata 4 artificial samples.","code":""},{"path":"https://pawelqs.github.io/cevodata/articles/cevodata_construction.html","id":"test-data","dir":"Articles","previous_headings":"Adding data","what":"Test data","title":"cevodata construction","text":"snvs tibble contains SNVs 4 artificial samples. 11 columns describing 16,000 variants 4 samples. needs contain: sample_id mutation_id /chrom, pos, ref, alt columns VAF column /ref_reads alt_reads columns Similarly, cnas tibble contains Copy Number Alterations 4 artificial samples. contains 8 columns, sample_id, chrom, start, end mandatory. metadata tibble associates sample IDs patient IDs, contains data patients’ sex samples’ purity.","code":"suppressPackageStartupMessages({   library(cevodata)   library(dplyr)   library(tibble)   library(ggplot2) })  theme_set(theme_minimal())  snvs <- SNVs(test_data) cnas <- CNAs(test_data) metadata <- get_metadata(test_data) glimpse(snvs) #> Rows: 16,000 #> Columns: 11 #> $ sample_id   <chr> \"Sample 1\", \"Sample 1\", \"Sample 1\", \"Sample 1\", \"Sample 1\"… #> $ chrom       <chr> \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"c… #> $ pos         <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,… #> $ gene_symbol <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ ref         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ alt         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ ref_reads   <dbl> 25, 22, 21, 34, 62, 4, 33, 31, 25, 41, 42, 64, 32, 29, 42,… #> $ alt_reads   <dbl> 29, 19, 20, 2, 1, 3, 34, 30, 17, 31, 1, 1, 25, 31, 40, 1, … #> $ impact      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ VAF         <dbl> 0.536, 0.462, 0.488, 0.078, 0.030, 0.444, 0.507, 0.483, 0.… #> $ DP          <int> 54, 41, 41, 36, 63, 7, 67, 61, 42, 72, 43, 65, 57, 60, 82,… glimpse(cnas) #> Rows: 8 #> Columns: 8 #> $ sample_id <chr> \"Sample 1\", \"Sample 1\", \"Sample 2\", \"Sample 2\", \"Sample 3\", … #> $ chrom     <chr> \"chr1\", \"chr2\", \"chr1\", \"chr2\", \"chr1\", \"chr2\", \"chr1\", \"chr… #> $ start     <dbl> 1, 1, 1, 1, 1, 1, 1, 1 #> $ end       <dbl> 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000 #> $ total_cn  <dbl> 2, 1, 2, 1, 2, 1, 2, 1 #> $ major_cn  <dbl> 1, 1, 1, 1, 1, 1, 1, 1 #> $ minor_cn  <dbl> 0, 0, 0, 0, 0, 0, 0, 0 #> $ normal_cn <dbl> 2, 2, 2, 2, 2, 2, 2, 2 metadata #> # A tibble: 4 × 4 #>   patient_id sample_id sex    purity #>   <chr>      <chr>     <chr>   <dbl> #> 1 Patient 1  Sample 1  male      1   #> 2 Patient 2  Sample 2  male      0.7 #> 3 Patient 3  Sample 3  female    1   #> 4 Patient 4  Sample 4  male      1"},{"path":"https://pawelqs.github.io/cevodata/articles/cevodata_construction.html","id":"prepare-data","dir":"Articles","previous_headings":"Adding data","what":"Prepare data","title":"cevodata construction","text":"Let’s see sequencing depth variants .  Variants lowest sequencing depth least accurate VAF values. One might want filter low-frequency variants reduce noise. Let’s remove variants sequencing depth less 20.","code":"ggplot(snvs, aes(sample_id, DP, fill = sample_id))+   geom_boxplot() +   scale_y_log10() filtered_snvs <- snvs |>    filter(DP >= 20)"},{"path":"https://pawelqs.github.io/cevodata/articles/cevodata_construction.html","id":"create-cevodata-object-and-add-data","dir":"Articles","previous_headings":"Adding data","what":"Create cevodata object and add data","title":"cevodata construction","text":"Now let’s create cevodata add data, including SNVs SNVs pass filter. can see default SNV tibble last one added (SNVs). Let’s assume want use filtered SNVs . can change default SNV tibble using default_SNVs() function. Similarly, one can use default_CNAs() function choose default CNAs tibble. Now, steps filtered SNVs used default.","code":"cd <- init_cevodata(name = \"Training cevodata\") |>   add_SNV_data(filtered_snvs, name = \"filtered_snvs\") |>    add_SNV_data(snvs, name = \"all_Mutect_snvs\") |>    add_CNA_data(cnas) |>   add_metadata(metadata)  cd #> <cevodata> dataset: Training cevodata #> SNV assays: filtered_snvs, all_Mutect_snvs (default) #> CNA assays: cnas (default) #> 4 cases, 4 samples, 1 sample per case #> 16000 mutations total, 4000 +/- 0 mutations per case #> Active models: default_SNVs(cd) <- \"filtered_snvs\" cd #> <cevodata> dataset: Training cevodata #> SNV assays: filtered_snvs (default), all_Mutect_snvs #> CNA assays: cnas (default) #> 4 cases, 4 samples, 1 sample per case #> 15072 mutations total, 3768 +/- 149 mutations per case #> Active models:"},{"path":"https://pawelqs.github.io/cevodata/articles/cevodata_construction.html","id":"getting-data","dir":"Articles","previous_headings":"","what":"Getting data","title":"cevodata construction","text":"get SNV data object, one can use SNVs() function. returns default SNV tibble. Alternatively, SNVs data can requested using name argument Similarly, CNAs can obtained using CNAs() function. get non-default CNAs, name argument can specified. metadata can obtained get_metadata() function. Patient-specific data can obtained get_patients_data() function. Let’s assume ’s another sample available Patient 1 add information metadata: Since purity column varies samples, included patient-specific data. sex column, constant records within patient, returned.","code":"SNVs(cd) #> # A tibble: 15,072 × 11 #>    sample_id chrom   pos gene_symbol ref   alt   ref_reads alt_reads impact #>  * <chr>     <chr> <int> <chr>       <chr> <chr>     <dbl>     <dbl> <chr>  #>  1 Sample 1  chr1      1 NA          NA    NA           25        29 NA     #>  2 Sample 1  chr1      2 NA          NA    NA           22        19 NA     #>  3 Sample 1  chr1      3 NA          NA    NA           21        20 NA     #>  4 Sample 1  chr1      4 NA          NA    NA           34         2 NA     #>  5 Sample 1  chr1      5 NA          NA    NA           62         1 NA     #>  6 Sample 1  chr1      7 NA          NA    NA           33        34 NA     #>  7 Sample 1  chr1      8 NA          NA    NA           31        30 NA     #>  8 Sample 1  chr1      9 NA          NA    NA           25        17 NA     #>  9 Sample 1  chr1     10 NA          NA    NA           41        31 NA     #> 10 Sample 1  chr1     11 NA          NA    NA           42         1 NA     #> # ℹ 15,062 more rows #> # ℹ 2 more variables: VAF <dbl>, DP <int> SNVs(cd, name = \"all_Mutect_snvs\") #> # A tibble: 16,000 × 11 #>    sample_id chrom   pos gene_symbol ref   alt   ref_reads alt_reads impact #>  * <chr>     <chr> <int> <chr>       <chr> <chr>     <dbl>     <dbl> <chr>  #>  1 Sample 1  chr1      1 NA          NA    NA           25        29 NA     #>  2 Sample 1  chr1      2 NA          NA    NA           22        19 NA     #>  3 Sample 1  chr1      3 NA          NA    NA           21        20 NA     #>  4 Sample 1  chr1      4 NA          NA    NA           34         2 NA     #>  5 Sample 1  chr1      5 NA          NA    NA           62         1 NA     #>  6 Sample 1  chr1      6 NA          NA    NA            4         3 NA     #>  7 Sample 1  chr1      7 NA          NA    NA           33        34 NA     #>  8 Sample 1  chr1      8 NA          NA    NA           31        30 NA     #>  9 Sample 1  chr1      9 NA          NA    NA           25        17 NA     #> 10 Sample 1  chr1     10 NA          NA    NA           41        31 NA     #> # ℹ 15,990 more rows #> # ℹ 2 more variables: VAF <dbl>, DP <int> CNAs(cd) #> # A tibble: 8 × 8 #>   sample_id chrom start   end total_cn major_cn minor_cn normal_cn #>   <chr>     <chr> <dbl> <dbl>    <dbl>    <dbl>    <dbl>     <dbl> #> 1 Sample 1  chr1      1  4000        2        1        0         2 #> 2 Sample 1  chr2      1  4000        1        1        0         2 #> 3 Sample 2  chr1      1  4000        2        1        0         2 #> 4 Sample 2  chr2      1  4000        1        1        0         2 #> 5 Sample 3  chr1      1  4000        2        1        0         2 #> 6 Sample 3  chr2      1  4000        1        1        0         2 #> 7 Sample 4  chr1      1  4000        2        1        0         2 #> 8 Sample 4  chr2      1  4000        1        1        0         2 get_metadata(cd) #> # A tibble: 4 × 4 #>   patient_id sample_id sex    purity #>   <chr>      <chr>     <chr>   <dbl> #> 1 Patient 1  Sample 1  male      1   #> 2 Patient 2  Sample 2  male      0.7 #> 3 Patient 3  Sample 3  female    1   #> 4 Patient 4  Sample 4  male      1 new_metadata <- tibble(   patient_id = \"Patient 1\",   sample_id = \"Sample 1b\",   sex = \"male\",   purity = 0.8 )  cd <- cd |>    add_metadata(new_metadata) get_patients_data(cd) #> # A tibble: 4 × 2 #>   patient_id sex    #>   <chr>      <chr>  #> 1 Patient 1  male   #> 2 Patient 2  male   #> 3 Patient 3  female #> 4 Patient 4  male"},{"path":"https://pawelqs.github.io/cevodata/articles/cevodata_construction.html","id":"stats-and-models","dir":"Articles","previous_headings":"","what":"Stats and models","title":"cevodata construction","text":"Complex statistic tibbles model objects can added stats models lists using add_stats() add_models() functions. Objects added stats need tibbles sample_id patient_id columns. Objects added models need lists, elements tibbles sample_id patient_id columns. model$info model$settings components lists vectors. add_stats() called internally calc_SFS(), calc_cumulative_tails(), calc_Mf_1f() functions. statistics can accessed using get_stats() function, although convenient helpers implemented. learn mode implemented statistics, check Statistics vignette. learn implemented models, check cevomod modelling package.","code":"my_stats <- SNVs(cd) |>    group_by(sample_id) |>    summarize(     n_snvs = n(),     mean_VAF = mean(VAF)   ) cd <- add_stats(cd, my_stats, name = \"my_stats\") get_stats(cd, \"my_stats\") #> # A tibble: 4 × 3 #>   sample_id n_snvs mean_VAF #>   <chr>      <int>    <dbl> #> 1 Sample 1    3782   0.341  #> 2 Sample 2    3972   0.0692 #> 3 Sample 3    3636   0.195  #> 4 Sample 4    3682   0.180 my_model <- list(   coefs = tibble(     sample_id = c(\"Sample 1\", \"Sample 2\"),     coef = c(0.1, 0.2)   ),   settings = list(model_type = \"x\") ) cd <- add_models(cd, my_model, name = \"my_model\") get_models(cd, \"my_model\") #> $coefs #> # A tibble: 2 × 2 #>   sample_id  coef #>   <chr>     <dbl> #> 1 Sample 1    0.1 #> 2 Sample 2    0.2 #>  #> $settings #> $settings$model_type #> [1] \"x\" #>  #>  #> attr(,\"class\") #> [1] \"cv_subitem\" \"list\" cd <- calc_SFS(cd) # equal to get_stats(cd, \"SFS\"), but will also calculate the SFS  # if the SFS slot is empty get_SFS(cd)  #> # A tibble: 233 × 5 #>    sample_id f_interval            f     y y_scaled #>    <chr>     <chr>             <dbl> <int>    <dbl> #>  1 Sample 1  (-0.0192,0]     -0.0096     0   0      #>  2 Sample 1  (0,0.0192]       0.0096    94   0.0249 #>  3 Sample 1  (0.0192,0.0385]  0.0288   469   0.124  #>  4 Sample 1  (0.0385,0.0577]  0.0481   353   0.0933 #>  5 Sample 1  (0.0577,0.0769]  0.0673   163   0.0431 #>  6 Sample 1  (0.0769,0.0962]  0.0865   120   0.0317 #>  7 Sample 1  (0.0962,0.115]   0.106     63   0.0167 #>  8 Sample 1  (0.115,0.135]    0.125     38   0.01   #>  9 Sample 1  (0.135,0.154]    0.145     27   0.0071 #> 10 Sample 1  (0.154,0.173]    0.163     19   0.005  #> # ℹ 223 more rows"},{"path":"https://pawelqs.github.io/cevodata/articles/filter_split.html","id":"transformations","dir":"Articles","previous_headings":"","what":"Transformations","title":"Filter or split cevodata","text":"3 cevodata transforming functions implemented: filter() split_by() merge()","code":"library(cevodata) #>  #> Attaching package: 'cevodata' #> The following object is masked from 'package:stats': #>  #>     filter"},{"path":"https://pawelqs.github.io/cevodata/articles/filter_split.html","id":"filter","dir":"Articles","previous_headings":"Transformations","what":"filter()","title":"Filter or split cevodata","text":"filter() can used subset cevodata using metadata columns tidyverse manner","code":"test_data |>    filter(sex == \"female\") #> <cevodata> dataset: test_data #> SNV assays: snvs (default) #> CNA assays: cnas (default) #> 1 cases, 1 samples, 1 sample per case #> NA #> Active models:"},{"path":"https://pawelqs.github.io/cevodata/articles/filter_split.html","id":"split_by","dir":"Articles","previous_headings":"Transformations","what":"split_by()","title":"Filter or split cevodata","text":"split_by() split cevodata metadata column","code":"splits <- test_data |>    split_by(sex)  splits #> <cevo_splits> object #> Splits:    male, female splits$male #> <cevodata> dataset: test_data #> SNV assays: snvs (default) #> CNA assays: cnas (default) #> 3 cases, 3 samples, 1 sample per case #> 12000 mutations total, 4000 +/- 0 mutations per case #> Active models:"},{"path":"https://pawelqs.github.io/cevodata/articles/filter_split.html","id":"merge","dir":"Articles","previous_headings":"Transformations","what":"merge()","title":"Filter or split cevodata","text":"merge() merge 2 objects one Transforming functions helpful investigating particular samples, example, one wants see VAF spectrum one sample quickly:","code":"merge(splits$male, splits$female) #> <cevodata> dataset: Merged datasets #> SNV assays: snvs (default) #> CNA assays: cnas (default) #> 4 cases, 4 samples, 1 sample per case #> 16000 mutations total, 4000 +/- 0 mutations per case #> Active models: test_data |>    filter(sample_id == \"Sample 2\") |>    plot_SFS() #> Warning in geom_bar(join_aes(bar_mapping, mapping), stat = \"identity\", alpha = #> alpha, : Ignoring unknown aesthetics: width"},{"path":"https://pawelqs.github.io/cevodata/articles/statistics.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"Statistics","text":"Document construction","code":"library(cevodata) #>  #> Attaching package: 'cevodata' #> The following object is masked from 'package:stats': #>  #>     filter library(ggplot2)  theme_set(theme_minimal())"},{"path":"https://pawelqs.github.io/cevodata/articles/statistics.html","id":"sfs","dir":"Articles","previous_headings":"","what":"SFS","title":"Statistics","text":"","code":"cd <- calc_SFS(test_data) names(cd$stats) #> [1] \"SFS\" get_SFS(cd) #> # A tibble: 227 × 5 #>    sample_id f_interval            f     y y_scaled #>    <chr>     <chr>             <dbl> <int>    <dbl> #>  1 Sample 1  (-0.0196,0]     -0.0098     0   0      #>  2 Sample 1  (0,0.0196]       0.0098    94   0.0235 #>  3 Sample 1  (0.0196,0.0392]  0.0294   489   0.122  #>  4 Sample 1  (0.0392,0.0588]  0.049    346   0.0865 #>  5 Sample 1  (0.0588,0.0784]  0.0686   162   0.0405 #>  6 Sample 1  (0.0784,0.098]   0.0882   123   0.0307 #>  7 Sample 1  (0.098,0.118]    0.108     94   0.0235 #>  8 Sample 1  (0.118,0.137]    0.128     57   0.0142 #>  9 Sample 1  (0.137,0.157]    0.147     41   0.0102 #> 10 Sample 1  (0.157,0.176]    0.166     30   0.0075 #> # ℹ 217 more rows plot_SFS(cd) #> Warning in geom_bar(join_aes(bar_mapping, mapping), stat = \"identity\", alpha = #> alpha, : Ignoring unknown aesthetics: width plot_SFS(cd) +   aes(fill = sex) #> Warning in geom_bar(join_aes(bar_mapping, mapping), stat = \"identity\", alpha = #> alpha, : Ignoring unknown aesthetics: width"},{"path":"https://pawelqs.github.io/cevodata/articles/statistics.html","id":"cumulative-tails","dir":"Articles","previous_headings":"","what":"Cumulative tails","title":"Statistics","text":"","code":"cd <- calc_cumulative_tails(cd) names(cd$stats) #> [1] \"SFS\"              \"cumulative_tails\" get_cumulative_tails(cd) #> # A tibble: 294 × 6 #>    sample_id f_interval      f     n     y y_scaled #>    <chr>     <chr>       <dbl> <int> <int>    <dbl> #>  1 Sample 1  (0.96,0.97] 0.965     3     3   0.0008 #>  2 Sample 1  (0.94,0.95] 0.945     1     4   0.001  #>  3 Sample 1  (0.93,0.94] 0.935     2     6   0.0015 #>  4 Sample 1  (0.92,0.93] 0.925     1     7   0.0018 #>  5 Sample 1  (0.91,0.92] 0.915     2     9   0.0022 #>  6 Sample 1  (0.9,0.91]  0.905     2    11   0.0027 #>  7 Sample 1  (0.89,0.9]  0.895     1    12   0.003  #>  8 Sample 1  (0.88,0.89] 0.885     1    13   0.0032 #>  9 Sample 1  (0.86,0.87] 0.865     2    15   0.0037 #> 10 Sample 1  (0.85,0.86] 0.855     1    16   0.004  #> # ℹ 284 more rows plot_cumulative_tails(cd)"},{"path":"https://pawelqs.github.io/cevodata/articles/statistics.html","id":"mf-1f","dir":"Articles","previous_headings":"","what":"M(f) ~ 1/f","title":"Statistics","text":"","code":"cd <- calc_Mf_1f(cd) names(cd$stats) #> [1] \"SFS\"              \"cumulative_tails\" \"Mf_1f\" get_Mf_1f(cd) #> # A tibble: 404 × 6 #>    sample_id f_interval      f     n `M(f)` `1/f` #>    <chr>     <chr>       <dbl> <int>  <int> <dbl> #>  1 Sample 1  (0.99,1]    0.995     0      0  1.00 #>  2 Sample 1  (0.98,0.99] 0.985     0      0  1.02 #>  3 Sample 1  (0.97,0.98] 0.975     0      0  1.03 #>  4 Sample 1  (0.96,0.97] 0.965     3      3  1.04 #>  5 Sample 1  (0.95,0.96] 0.955     0      3  1.05 #>  6 Sample 1  (0.94,0.95] 0.945     1      4  1.06 #>  7 Sample 1  (0.93,0.94] 0.935     2      6  1.07 #>  8 Sample 1  (0.92,0.93] 0.925     1      7  1.08 #>  9 Sample 1  (0.91,0.92] 0.915     2      9  1.09 #> 10 Sample 1  (0.9,0.91]  0.905     2     11  1.10 #> # ℹ 394 more rows plot_Mf_1f(cd)"},{"path":"https://pawelqs.github.io/cevodata/articles/statistics.html","id":"sample-level-statistics","dir":"Articles","previous_headings":"","what":"Sample level statistics","title":"Statistics","text":"","code":"cd <- test_data cd$metadata$patient_id <- c(\"Patient 1\", \"Patient 1\", \"Patient 2\", \"Patient 3\") calc_all_sample_stats(cd) |>    get_stats(\"sample_stats\") #> # A tibble: 4 × 2 #>   sample_id mutation_burden #>   <chr>               <int> #> 1 Sample 1             4000 #> 2 Sample 2             3962 #> 3 Sample 3             4000 #> 4 Sample 4             4000"},{"path":"https://pawelqs.github.io/cevodata/articles/statistics.html","id":"patient-level-statistics","dir":"Articles","previous_headings":"","what":"Patient level statistics","title":"Statistics","text":"","code":"calc_all_patient_stats(cd) |>    get_stats(\"patient_stats\") #> # A tibble: 3 × 2 #>   patient_id mutation_burden #>   <chr>                <int> #> 1 Patient 1             4024 #> 2 Patient 2             4000 #> 3 Patient 3             4000"},{"path":"https://pawelqs.github.io/cevodata/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Paweł Kuś. Author, maintainer.","code":""},{"path":"https://pawelqs.github.io/cevodata/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kuś P (2024). cevodata: Class storing cancer DNAseq data. R package version 1.0.0, https://pawelqs.github.io/cevodata/.","code":"@Manual{,   title = {cevodata: Class for storing cancer DNAseq data},   author = {Paweł Kuś},   year = {2024},   note = {R package version 1.0.0},   url = {https://pawelqs.github.io/cevodata/}, }"},{"path":"https://pawelqs.github.io/cevodata/index.html","id":"cevodata","dir":"","previous_headings":"","what":"Class for storing cancer DNAseq data","title":"Class for storing cancer DNAseq data","text":"cevodata R package provides cevodata class - data structure designed store mutational data (SNVs, CNAs), metadata, analytical results (e.g. mathematical models) cohort tumor samples. also facilitates data manipulation (e.g. filtering splitting data object) visualization. package also provides set functions calculate variant’s Cancer Cell Fractions (CCF), number sample-level statistics, VAF/CCF spectra, cumulative tails, Williams’s M(f) ∼ 1/f statistics.","code":""},{"path":"https://pawelqs.github.io/cevodata/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Class for storing cancer DNAseq data","text":"can install development version cevodata GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"pawelqs/cevodata\")"},{"path":"https://pawelqs.github.io/cevodata/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Class for storing cancer DNAseq data","text":"user interface cevomod inspired tidyverse R packages ecosystem pipe-oriented. functions accept cevodata first argument return modified cevodata. convention allows building pipelines, e.g., compose cevodata object adding new data components step step. basic example shows create cevodata object plot VAF spectra: examples go vignettes.","code":"library(cevodata)  cd <- init_cevodata() |>    add_snv_data(snv_tbl) |>   add_cna_data(cna_tbl) |>   calc_mutation_frequencies()  plot_SFS(cd)"},{"path":"https://pawelqs.github.io/cevodata/index.html","id":"last-changes","dir":"","previous_headings":"","what":"Last changes","title":"Class for storing cancer DNAseq data","text":"v1.0.0 - cevodata package extracted original cevomod R package","code":""},{"path":"https://pawelqs.github.io/cevodata/index.html","id":"help-and-support","dir":"","previous_headings":"","what":"Help and support","title":"Class for storing cancer DNAseq data","text":"GitHub Issues","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/Mf_1f.html","id":null,"dir":"Reference","previous_headings":"","what":"William's M(f) ~ 1/f statistics — Mf_1f","title":"William's M(f) ~ 1/f statistics — Mf_1f","text":"Mf_1f columns description: sample_id f n - number mutations VAF interval M(f) 1/f columns plot William's statistics","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/Mf_1f.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"William's M(f) ~ 1/f statistics — Mf_1f","text":"","code":"calc_Mf_1f(object, ...)  # S3 method for cevodata calc_Mf_1f(   object,   name = \"Mf_1f\",   snvs_name = default_SNVs(object),   column = get_snvs_frequency_measure(object, snvs_name),   bins = 100,   verbose = get_verbosity(),   ... )  # S3 method for cevo_snvs calc_Mf_1f(   object,   column = get_snvs_frequency_measure(object),   bins = 100,   verbose = get_verbosity(),   ... )  get_Mf_1f(object, name = \"Mf_1f\", verbose = get_verbosity(), ...)  plot_Mf_1f(object, ...)  # S3 method for cevodata plot_Mf_1f(   object,   bins = NULL,   from = 0.1,   to = 0.25,   scale = TRUE,   geom = \"point\",   ... )"},{"path":"https://pawelqs.github.io/cevodata/reference/Mf_1f.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"William's M(f) ~ 1/f statistics — Mf_1f","text":"object SNVs tibble object ... arguments name name slot SFS statistics snvs_name SNVs use? column VAF CCF/2 bins Resolution cumulative tails calculation verbose verbose? min f plot max f plot scale scale data? geom ggplot geom use, eg. geom_line()","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/Mf_1f.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"William's M(f) ~ 1/f statistics — Mf_1f","text":"ggplot obj","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/Mf_1f.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"William's M(f) ~ 1/f statistics — Mf_1f","text":"calc_Mf_1f(): Calculate Williams M(f) ~ 1/f saves cevodata$models$Mf_1f calc_Mf_1f(cevodata): Method  object calc_Mf_1f(cevo_snvs): Method <cevo_snvs> object get_Mf_1f(): Get M(f) ~ 1/f Calculates M(f) ~ 1/f calculated yet plot_Mf_1f(cevodata): Plot M(f) ~ 1/f","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/Mf_1f.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"William's M(f) ~ 1/f statistics — Mf_1f","text":"","code":"data(\"test_data\") test_data |>   calc_Mf_1f() #> <cevodata> dataset: test_data #> SNV assays: snvs (default) #> CNA assays: cnas (default) #> 4 cases, 4 samples, 1 sample per case #> 16000 mutations total, 4000 +/- 0 mutations per case #> Active models:   test_data |>   plot_Mf_1f()"},{"path":"https://pawelqs.github.io/cevodata/reference/SNVs_CNAs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get SNVs with merged CNAs — SNVs_CNAs","title":"Get SNVs with merged CNAs — SNVs_CNAs","text":"Get SNVs merged CNAs","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/SNVs_CNAs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get SNVs with merged CNAs — SNVs_CNAs","text":"","code":"SNVs_CNAs(object)"},{"path":"https://pawelqs.github.io/cevodata/reference/SNVs_CNAs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get SNVs with merged CNAs — SNVs_CNAs","text":"object cevodata object SNVs CNAs","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/add_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Add metadata to the cevodata object — add_metadata","title":"Add metadata to the cevodata object — add_metadata","text":"Add metadata cevodata object","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/add_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add metadata to the cevodata object — add_metadata","text":"","code":"add_metadata(object, data)"},{"path":"https://pawelqs.github.io/cevodata/reference/add_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add metadata to the cevodata object — add_metadata","text":"object object data name new default assay","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/annotate_normal_cn.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate chromosome ploidies in CNA data — annotate_normal_cn","title":"Annotate chromosome ploidies in CNA data — annotate_normal_cn","text":"Adds normal_cn column data. column required e.g. Dentro CCF calculation method. Requires 'sex' column metadata. Males encoded 'M' \"male'.","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/annotate_normal_cn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate chromosome ploidies in CNA data — annotate_normal_cn","text":"","code":"annotate_normal_cn(object, which_cnas = default_CNAs(object))"},{"path":"https://pawelqs.github.io/cevodata/reference/annotate_normal_cn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate chromosome ploidies in CNA data — annotate_normal_cn","text":"object object which_cnas Name CNAs slot","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/annotate_normal_cn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate chromosome ploidies in CNA data — annotate_normal_cn","text":"object","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/as_cevo_snvs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create cevo_snvs tibble — as_cevo_snvs","title":"Create cevo_snvs tibble — as_cevo_snvs","text":"Create cevo_snvs tibble","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/as_cevo_snvs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create cevo_snvs tibble — as_cevo_snvs","text":"","code":"as_cevo_snvs(snvs)"},{"path":"https://pawelqs.github.io/cevodata/reference/as_cevo_snvs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create cevo_snvs tibble — as_cevo_snvs","text":"snvs tibble","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/calc_mutation_frequencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Calc mutation frequencies — calc_mutation_frequencies","title":"Calc mutation frequencies — calc_mutation_frequencies","text":"Calculates CNV-corrected mutation frequencies. Implemented methods: Dentro - calculates Cancer Cell Fraction (CCF) using formulas Dentro et al. Principles Reconstructing Subclonal Architecture Cancers (2015)","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/calc_mutation_frequencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calc mutation frequencies — calc_mutation_frequencies","text":"","code":"calc_mutation_frequencies(   object,   method = \"Dentro\",   which_snvs = default_SNVs(object),   which_cnas = default_CNAs(object),   rm_intermediate_cols = TRUE,   verbose = get_verbosity() )  dentro_2015_correction(tbl)"},{"path":"https://pawelqs.github.io/cevodata/reference/calc_mutation_frequencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calc mutation frequencies — calc_mutation_frequencies","text":"object object method Available methods: Dentro which_snvs SNVs use which_cnas CNAs use rm_intermediate_cols columns used get CCF removed? verbose Verbose? tbl tibble contains columns: VAF, total_cn, normal_cn, purity","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/calc_mutation_frequencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calc mutation frequencies — calc_mutation_frequencies","text":"object tibble new columns: u, m, CCF (Cancer Cell Fraction)","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/calc_mutation_frequencies.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Calc mutation frequencies — calc_mutation_frequencies","text":"dentro_2015_correction(): Implements CNV-based frequency correction method described Dentro et al. 'Principles Reconstructing Subclonal Architecture Cancers' (2015)","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/cevodata-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cevodata: Class for storing cancer DNAseq data — cevodata-package","title":"cevodata: Class for storing cancer DNAseq data — cevodata-package","text":"cevodata provides <cevodata> class, R class storing DNA sequencing data many patients many tumor samples signle object, methods manipulate .","code":""},{"path":[]},{"path":"https://pawelqs.github.io/cevodata/reference/cevodata-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cevodata: Class for storing cancer DNAseq data — cevodata-package","text":"Maintainer: Paweł Kuś kpawel2210@gmail.com (ORCID)","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/cevodata_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Get/Add SNV/CNA data from the cevodata dataset — cevodata_components","title":"Get/Add SNV/CNA data from the cevodata dataset — cevodata_components","text":"Get/Add SNV/CNA data cevodata dataset","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/cevodata_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get/Add SNV/CNA data from the cevodata dataset — cevodata_components","text":"","code":"add_SNV_data(object, snvs, name = NULL)  add_CNA_data(object, cnas, name = NULL)  add_stats(object, stats, name)  add_models(object, models, name)  SNVs(object, name = default_SNVs(object), ...)  CNAs(object, name = default_CNAs(object), ...)  get_models(object, name = active_models(object))  get_model_names(object)  get_stats(object, name)  get_CNAs_var_names(object, which = default_CNAs(object), ...)  get_SNVs_wider(object, fill_na = NULL)"},{"path":"https://pawelqs.github.io/cevodata/reference/cevodata_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get/Add SNV/CNA data from the cevodata dataset — cevodata_components","text":"object cevodata object snvs Tibble SNVs name Name SNVs/CNAs/models cnas Tibble CNAs stats Tibble stats models cv_subitem object models ... arguments CNA assay use fill_na fill missing value","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/cevodata_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get/Add SNV/CNA data from the cevodata dataset — cevodata_components","text":"tibble","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/cevodata_components.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get/Add SNV/CNA data from the cevodata dataset — cevodata_components","text":"add_SNV_data(): Add new SNVs cevodata add_CNA_data(): Add new CNAs cevodata add_stats(): Add new models cevodata add_models(): Add new models cevodata SNVs(): Get SNVs cevodata dataset CNAs(): Get CNAs cevodata dataset get_models(): Get models cevodata dataset get_model_names(): Get names fitted models get_stats(): Get stats cevodata object get_CNAs_var_names(): Get CNA variable names cevodata object get_SNVs_wider(): Get SNVs wide table form","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/cumulative_tails.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative tails — cumulative_tails","title":"Cumulative tails — cumulative_tails","text":"cumulative_tails columns: f n column number mutations f interval y cumulative tail value y_scaled y values scaled range 0-1","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/cumulative_tails.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative tails — cumulative_tails","text":"","code":"calc_cumulative_tails(object, ...)  # S3 method for cevodata calc_cumulative_tails(   object,   name = \"cumulative_tails\",   snvs_name = default_SNVs(object),   column = get_snvs_frequency_measure(object, snvs_name),   bins = 100,   verbose = get_verbosity(),   ... )  # S3 method for cevo_snvs calc_cumulative_tails(   object,   column = get_snvs_frequency_measure(object),   bins = 100,   verbose = get_verbosity(),   ... )  get_cumulative_tails(   object,   name = \"cumulative_tails\",   verbose = get_verbosity(),   ... )  plot_cumulative_tails(object, ...)  # S3 method for cevodata plot_cumulative_tails(   object,   name = \"SFS\",   ...,   scale_y = TRUE,   scales = \"loglog\" )"},{"path":"https://pawelqs.github.io/cevodata/reference/cumulative_tails.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative tails — cumulative_tails","text":"object SNVs tibble object ... passed geom_line() name Name cumulative tails stats snvs_name SNVs use? column VAF CCF/2 bins Resolution cumulative tails calculation verbose Verbose? scale_y scale y vaules 1? scales loglog/semilog","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/cumulative_tails.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative tails — cumulative_tails","text":"ggplot obj","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/cumulative_tails.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Cumulative tails — cumulative_tails","text":"calc_cumulative_tails(cevodata): Calculate cumulative tails saves cevodata$models$cumulative_tails tibble calc_cumulative_tails(cevo_snvs): Calculate cumulative tails plot_cumulative_tails(cevodata): Shortcut plot cum tails SNVs dataframe","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/cumulative_tails.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative tails — cumulative_tails","text":"","code":"data(\"test_data\") test_data |>   calc_cumulative_tails() #> <cevodata> dataset: test_data #> SNV assays: snvs (default) #> CNA assays: cnas (default) #> 4 cases, 4 samples, 1 sample per case #> 16000 mutations total, 4000 +/- 0 mutations per case #> Active models:   test_data |>   plot_cumulative_tails()"},{"path":"https://pawelqs.github.io/cevodata/reference/driver_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Tbl of driver genes from Bailey, Ding et al. 'Comprehensive Characterization\nof Cancer Driver Genes and Mutations', Cell, 2-18\nhttps://doi.org/10.1016/j.cell.2018.02.060 — driver_genes","title":"Tbl of driver genes from Bailey, Ding et al. 'Comprehensive Characterization\nof Cancer Driver Genes and Mutations', Cell, 2-18\nhttps://doi.org/10.1016/j.cell.2018.02.060 — driver_genes","text":"Tbl driver genes Bailey, Ding et al. 'Comprehensive Characterization Cancer Driver Genes Mutations', Cell, 2-18 https://doi.org/10.1016/j.cell.2018.02.060","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/export_to_clip.html","id":null,"dir":"Reference","previous_headings":"","what":"Export cevodata to CliP input — export_to_clip","title":"Export cevodata to CliP input — export_to_clip","text":"CliP algorithm clonal structure identification penalizing pairwise differences Wenyi Wang Lab MD Anderson Cancer Center Houston.","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/export_to_clip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export cevodata to CliP input — export_to_clip","text":"","code":"export_to_clip(   cd,   out_dir = NULL,   snvs_name = default_SNVs(cd),   cnas_name = default_CNAs(cd),   purity_column = \"purity\",   keep_chromosomes = str_c(\"chr\", 1:22) )"},{"path":"https://pawelqs.github.io/cevodata/reference/export_to_clip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export cevodata to CliP input — export_to_clip","text":"cd cevodata object out_dir Directory save files. List items returned out_dir NULL snvs_name name snvs use cnas_name name cnas use purity_column name metadata column purity estimates used keep_chromosomes list non-sex chromosomes. CliP use sex chromosomes","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/filter.cevodata.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter/subset cevodata object — filter.cevodata","title":"Filter/subset cevodata object — filter.cevodata","text":"wrapper around dplyr::filter function can used subset cevodata object. Works like dplyr::filter, performs filtering metadata, filters SNVs, CNAs, clones models keeping samples kept metadata","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/filter.cevodata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter/subset cevodata object — filter.cevodata","text":"","code":"# S3 method for cevodata filter(.data, ..., .preserve = FALSE)"},{"path":"https://pawelqs.github.io/cevodata/reference/filter.cevodata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter/subset cevodata object — filter.cevodata","text":".data cevodata object ... expression passed dplyr::filter(...) .preserve Relevant .data input grouped. .preserve = FALSE (default), grouping structure recalculated based resulting data, otherwise grouping kept .","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/filter.cevodata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter/subset cevodata object — filter.cevodata","text":"cevodata object","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/filter_SNVs_by_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter SNVs by position: using regions tbl or bed file — filter_SNVs_by_regions","title":"Filter SNVs by position: using regions tbl or bed file — filter_SNVs_by_regions","text":"Filter SNVs position: using regions tbl bed file","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/filter_SNVs_by_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter SNVs by position: using regions tbl or bed file — filter_SNVs_by_regions","text":"","code":"filter_SNVs_by_regions(snvs, regions = NULL, bed_file = NULL)"},{"path":"https://pawelqs.github.io/cevodata/reference/filter_SNVs_by_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter SNVs by position: using regions tbl or bed file — filter_SNVs_by_regions","text":"snvs snvs tbl columns: sample_id, chrom, pos regions regions tbl columns chrom, start, end bed_file bed file","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/get_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get sample metadata — get_metadata","title":"Get sample metadata — get_metadata","text":"Get sample metadata","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/get_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get sample metadata — get_metadata","text":"","code":"get_metadata(cd)"},{"path":"https://pawelqs.github.io/cevodata/reference/get_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get sample metadata — get_metadata","text":"cd cevodata object","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/get_patients_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metadata cols that are constant within each patient — get_patients_data","title":"Get metadata cols that are constant within each patient — get_patients_data","text":"Get metadata cols constant within patient","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/get_patients_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metadata cols that are constant within each patient — get_patients_data","text":"","code":"get_patients_data(cd)"},{"path":"https://pawelqs.github.io/cevodata/reference/get_patients_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metadata cols that are constant within each patient — get_patients_data","text":"cd object","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/grapes-not-in-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Not in operator — %not in%","title":"Not in operator — %not in%","text":"operator","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/grapes-not-in-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Not in operator — %not in%","text":"","code":"x %not in% y"},{"path":"https://pawelqs.github.io/cevodata/reference/grapes-not-in-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Not in operator — %not in%","text":"x left-hand side argument y right-hand side argument","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/init_cevodata.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new cevomod dataset object — init_cevodata","title":"Create new cevomod dataset object — init_cevodata","text":"Create new cevomod dataset object","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/init_cevodata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new cevomod dataset object — init_cevodata","text":"","code":"init_cevodata(   name = \"Unnamed dataset\",   snvs = NULL,   snvs_name = NULL,   cnas = NULL,   cnas_name = NULL )"},{"path":"https://pawelqs.github.io/cevodata/reference/init_cevodata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new cevomod dataset object — init_cevodata","text":"name dataset name snvs tibble SNVs snvs_name name SNVs assay cnas tibble CNAs cnas_name name CNAs assay","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/init_cevodata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new cevomod dataset object — init_cevodata","text":"cevodata object","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/intervalize_mutation_frequencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Intervalize the mutation frequencies — intervalize_mutation_frequencies","title":"Intervalize the mutation frequencies — intervalize_mutation_frequencies","text":"Intervalize mutation frequencies subsequent analyses plots. Adds f_interval column SNV tibble","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/intervalize_mutation_frequencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intervalize the mutation frequencies — intervalize_mutation_frequencies","text":"","code":"intervalize_mutation_frequencies(object, ...)  # S3 method for cevodata intervalize_mutation_frequencies(   object,   which_snvs = default_SNVs(object),   column = get_snvs_frequency_measure(object, which_snvs),   bins = NULL,   verbose = get_verbosity(),   ... )  # S3 method for cevo_snvs intervalize_mutation_frequencies(   object,   column = get_snvs_frequency_measure(object),   bins = NULL,   verbose = get_verbosity(),   ... )"},{"path":"https://pawelqs.github.io/cevodata/reference/intervalize_mutation_frequencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intervalize the mutation frequencies — intervalize_mutation_frequencies","text":"object object ... args which_snvs SNVs use column frequency measure column intervalize? default, uses CCF/2  found SNV tibble, VAF otherwise bins Number interval bins verbose Verbose?","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/intervalize_mutation_frequencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intervalize the mutation frequencies — intervalize_mutation_frequencies","text":"object","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/join_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Join object metadata to a tibble — join_metadata","title":"Join object metadata to a tibble — join_metadata","text":"Join object metadata tibble","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/join_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join object metadata to a tibble — join_metadata","text":"","code":"join_metadata(tbl, cd, by = \"sample_id\")"},{"path":"https://pawelqs.github.io/cevodata/reference/join_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join object metadata to a tibble — join_metadata","text":"tbl Tibble cd object Column name join ","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/merge.cevodata.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two cevodata objects — merge.cevodata","title":"Merge two cevodata objects — merge.cevodata","text":"Merge two cevodata objects","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/merge.cevodata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two cevodata objects — merge.cevodata","text":"","code":"# S3 method for cevodata merge(   x,   y,   ...,   name = \"Merged datasets\",   verbose = get_verbosity(),   .id = NULL )"},{"path":"https://pawelqs.github.io/cevodata/reference/merge.cevodata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two cevodata objects — merge.cevodata","text":"x, y data frames, objects coerced one. ... arguments passed methods. name Name merged object verbose Show messages? .id datasets names saved metadata column, provided","code":""},{"path":[]},{"path":"https://pawelqs.github.io/cevodata/reference/misc_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calc extra sample/patient stats — misc_stats","text":"","code":"calc_all_sample_stats(object, snvs_name = default_SNVs(object))  calc_all_patient_stats(object, snvs_name = default_SNVs(object))  calc_sample_sample_stats(object, snvs_name = default_SNVs(object))"},{"path":"https://pawelqs.github.io/cevodata/reference/misc_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calc extra sample/patient stats — misc_stats","text":"object cevodata object snvs_name SNVs use","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/misc_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calc extra sample/patient stats — misc_stats","text":"Calculated stats saved appropriate cevodata$stats slots can obtained get_stats() function.","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/misc_stats.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Calc extra sample/patient stats — misc_stats","text":"calc_all_sample_stats(): Calc misc sample level stats Currently calculates sample mutation burden calc_all_patient_stats(): Calc misc patient level stats Currently calculates patient mutation burden calc_sample_sample_stats(): Calc sample-sample stats Currently calculates Jaccard index","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/plot.cevo_Mf_1f_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot M(f) ~ 1/f — plot.cevo_Mf_1f_tbl","title":"Plot M(f) ~ 1/f — plot.cevo_Mf_1f_tbl","text":"Plot M(f) ~ 1/f","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/plot.cevo_Mf_1f_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot M(f) ~ 1/f — plot.cevo_Mf_1f_tbl","text":"","code":"# S3 method for cevo_Mf_1f_tbl plot(   x,   from = 0.1,   to = 0.25,   scale = TRUE,   geom = \"point\",   mapping = NULL,   ... )"},{"path":"https://pawelqs.github.io/cevodata/reference/plot.cevo_Mf_1f_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot M(f) ~ 1/f — plot.cevo_Mf_1f_tbl","text":"x tibble calc_Mf_1f() results min f plot max f plot scale scale data? geom ggplot geom use, eg. geom_line() mapping mapping ... futher passed geom_()","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/plot.cevo_Mf_1f_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot M(f) ~ 1/f — plot.cevo_Mf_1f_tbl","text":"ggplot obj","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/plot.cevo_Mf_1f_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot M(f) ~ 1/f — plot.cevo_Mf_1f_tbl","text":"","code":"data(\"test_data\")  test_data |>   calc_Mf_1f() |>   plot_Mf_1f()"},{"path":"https://pawelqs.github.io/cevodata/reference/plot.cevo_SFS_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot SFS — plot.cevo_SFS_tbl","title":"Plot SFS — plot.cevo_SFS_tbl","text":"Plot SFS","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/plot.cevo_SFS_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot SFS — plot.cevo_SFS_tbl","text":"","code":"# S3 method for cevo_SFS_tbl plot(x, mapping = NULL, alpha = 0.8, ..., geom = \"bar\")"},{"path":"https://pawelqs.github.io/cevodata/reference/plot.cevo_SFS_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot SFS — plot.cevo_SFS_tbl","text":"x tibble calc_SFS() results mapping aes() alpha alpha ... futher passed geom_() geom geom","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/plot.cevo_SFS_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot SFS — plot.cevo_SFS_tbl","text":"ggplot obj","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/plot.cevo_cumulative_tails_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the cumulative tails — plot.cevo_cumulative_tails_tbl","title":"Plot the cumulative tails — plot.cevo_cumulative_tails_tbl","text":"Plot cumulative tails","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/plot.cevo_cumulative_tails_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the cumulative tails — plot.cevo_cumulative_tails_tbl","text":"","code":"# S3 method for cevo_cumulative_tails_tbl plot(x, scale_y = TRUE, scales = \"loglog\", ...)"},{"path":"https://pawelqs.github.io/cevodata/reference/plot.cevo_cumulative_tails_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the cumulative tails — plot.cevo_cumulative_tails_tbl","text":"x tibble calc_cumulative_tails() results scale_y logical scales loglog/semilog ... required Generic","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/plot.cevo_cumulative_tails_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the cumulative tails — plot.cevo_cumulative_tails_tbl","text":"ggplot obj","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/plot.cevo_cumulative_tails_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the cumulative tails — plot.cevo_cumulative_tails_tbl","text":"","code":"data(\"test_data\") test_data |>   calc_cumulative_tails() |>   plot_cumulative_tails()"},{"path":"https://pawelqs.github.io/cevodata/reference/quick_save.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick save to ~/.cevomod directory — quick_load","title":"Quick save to ~/.cevomod directory — quick_load","text":"Quick save ~/.cevomod directory","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/quick_save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick save to ~/.cevomod directory — quick_load","text":"","code":"quick_load()  quick_save(object)"},{"path":"https://pawelqs.github.io/cevodata/reference/quick_save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick save to ~/.cevomod directory — quick_load","text":"object object save","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/quick_save.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Quick save to ~/.cevomod directory — quick_load","text":"quick_load(): Quick load ~/.cevomod/object.Rds","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/readthis-integration.html","id":null,"dir":"Reference","previous_headings":"","what":"readthis integration — readthis-integration","title":"readthis integration — readthis-integration","text":"readthis package may used easily read data popular mutation callers R environment. readthis functions can supplied single file paths, also lists files even paths directories files loaded (cevodata object store data many samples!) readthis functions return tibbles list tibbles. tibbles/ objects usually instances cevo_<software_name> S3 classes. cevomod implements methods allow add types data cevodata objects conveniently.","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/readthis-integration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"readthis integration — readthis-integration","text":"","code":"add_data(cd, data, ...)  add_to_cevodata(data, cd, name, verbose, ...)"},{"path":"https://pawelqs.github.io/cevodata/reference/readthis-integration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"readthis integration — readthis-integration","text":"cd object data Object read readthis functions ... arguments name Name data verbose Verbose?","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/readthis-integration.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"readthis integration — readthis-integration","text":"add_data(): add_data() function takes cevodata first argument, preferred method adding data R pipelines. add_to_cevodata(): add_to_cevodata() generic set methods different classes data. methods called add_data() function.","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/readthis-integration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"readthis integration — readthis-integration","text":"","code":"# library(cevomod)  ascat_dir <- system.file(\"extdata\", \"ASCAT\", package = \"readthis\") ascat <- readthis::read_ascat_files(ascat_dir) cd <- init_cevodata(\"Test dataset\") |>   add_data(ascat)"},{"path":"https://pawelqs.github.io/cevodata/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr filter","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/set_snvs_frequency_measure.html","id":null,"dir":"Reference","previous_headings":"","what":"Set/Get SNVs frequency measure — set_snvs_frequency_measure","title":"Set/Get SNVs frequency measure — set_snvs_frequency_measure","text":"Set/Get SNVs frequency measure","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/set_snvs_frequency_measure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set/Get SNVs frequency measure — set_snvs_frequency_measure","text":"","code":"set_snvs_frequency_measure(object, ...)  get_snvs_frequency_measure(object, ...)  # S3 method for cevodata set_snvs_frequency_measure(   object,   column_name,   snvs_name = default_SNVs(object),   ... )  # S3 method for cevodata get_snvs_frequency_measure(object, snvs_name = default_SNVs(object), ...)  # S3 method for tbl_df set_snvs_frequency_measure(object, column_name, ...)  # S3 method for tbl_df get_snvs_frequency_measure(object, ...)"},{"path":"https://pawelqs.github.io/cevodata/reference/set_snvs_frequency_measure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set/Get SNVs frequency measure — set_snvs_frequency_measure","text":"object cevodata object ... arguments column_name Name new frequency measure column snvs_name Name SNVs assay","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Get/Set active assays of the cevodata object — settings","title":"Get/Set active assays of the cevodata object — settings","text":"Get/Set active assays cevodata object","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get/Set active assays of the cevodata object — settings","text":"","code":"default_SNVs(object, ...)  default_SNVs(object, ...) <- value  default_CNAs(object, ...)  default_CNAs(object, ...) <- value  active_models(object, ...)  active_models(object, ...) <- value"},{"path":"https://pawelqs.github.io/cevodata/reference/settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get/Set active assays of the cevodata object — settings","text":"object object ... arguments value name new default assay","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/settings.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get/Set active assays of the cevodata object — settings","text":"default_SNVs(): Get default SNVs assay cevodata default_SNVs(object, ...) <- value: Set default SNVs assay cevodata default_CNAs(): Get default CNAs assay cevodata default_CNAs(object, ...) <- value: Set default CNAs assay cevodata active_models(): Get active models cevodata active_models(object, ...) <- value: Set active models cevodata","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/sfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Site Frequency Spectra — sfs","title":"Site Frequency Spectra — sfs","text":"Site Frequency Spectra (Variant Allele Frequency Spectra) main statistic used cevomod.","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/sfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Site Frequency Spectra — sfs","text":"","code":"calc_SFS(object, ...)  # S3 method for cevodata calc_SFS(   object,   name = \"SFS\",   snvs_name = default_SNVs(object),   column = get_snvs_frequency_measure(object, snvs_name),   bins = NULL,   verbose = get_verbosity(),   ... )  # S3 method for cevo_snvs calc_SFS(   object,   column = get_snvs_frequency_measure(object),   bins = NULL,   verbose = get_verbosity(),   ... )  get_SFS(object, name = \"SFS\", verbose = get_verbosity(), ...)  plot_SFS(object, ...)  # S3 method for cevodata plot_SFS(object, ..., mapping = NULL, name = \"SFS\", geom = \"bar\")"},{"path":"https://pawelqs.github.io/cevodata/reference/sfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Site Frequency Spectra — sfs","text":"object SNVs tibble object ... arguments name name slot SFS statistics snvs_name SNVs use? column VAF CCF/2 bins Resolution cumulative tails calculation verbose verbose? mapping aes() geom Geom","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/sfs.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Site Frequency Spectra — sfs","text":"calc_SFS(): Calculates spectra samples saves saves cevodata$models$SFS tibble. SFS columns description: y number mutations frequency interval y_scaled y values scaled range 0-1 calc_SFS(cevodata): method cevodata object calc_SFS(cevo_snvs): method cevo_snvs object get_SFS(): Get SFS Calculates SFS sfs slot object$stats empty plot_SFS(): Plot SFS plot_SFS(cevodata): Plot SFS","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/sfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Site Frequency Spectra — sfs","text":"","code":"data(\"test_data\")  test_data |>   calc_SFS() |>   plot_SFS() #> Warning: Ignoring unknown aesthetics: width"},{"path":"https://pawelqs.github.io/cevodata/reference/split_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Split object — split_by","title":"Split object — split_by","text":"Split object","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/split_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split object — split_by","text":"","code":"split_by(object, ...)  # S3 method for cevodata split_by(object, var, ...)"},{"path":"https://pawelqs.github.io/cevodata/reference/split_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split object — split_by","text":"object cevodata object ... arguments var name column metadata","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/split_by.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Split object — split_by","text":"split_by(cevodata): Split cevodata object function based filter.cevodata(), thus might inefficient many levels var column.","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/stat_cumulative_tail.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Cumulative Tail — stat_cumulative_tail","title":"Plot Cumulative Tail — stat_cumulative_tail","text":"Nice extention default ggplot2 stats. However, easier use plot_cumulative_tails() function.","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/stat_cumulative_tail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Cumulative Tail — stat_cumulative_tail","text":"","code":"stat_cumulative_tail(   mapping = NULL,   data = NULL,   geom = \"point\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   bins = 100,   ... )"},{"path":"https://pawelqs.github.io/cevodata/reference/stat_cumulative_tail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Cumulative Tail — stat_cumulative_tail","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geom position Position adjustment, either string naming adjustment (e.g. \"jitter\" use position_jitter), result call position adjustment function. Use latter need change settings adjustment. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). bins number bins ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat.","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/stat_cumulative_tail.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Cumulative Tail — stat_cumulative_tail","text":"stat_bin() suitable continuous x data. x data discrete, probably want use stat_count(). default, underlying computation (stat_bin()) uses 30 bins; good default, idea get experimenting different number bins. can also experiment modifying binwidth center boundary arguments. binwidth overrides bins one change time. may need look options uncover full story behind data. addition geom_histogram(), can create histogram plot using scale_x_binned() geom_bar(). method default plots tick marks bar.","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/stat_cumulative_tail.html","id":"orientation","dir":"Reference","previous_headings":"","what":"Orientation","title":"Plot Cumulative Tail — stat_cumulative_tail","text":"geom treats axis differently , thus, can thus two orientations. Often orientation easy deduce combination given mappings types positional scales use. Thus, ggplot2 default try guess orientation layer . rare circumstances, orientation ambiguous guessing may fail. case orientation can specified directly using orientation parameter, can either \"x\" \"y\". value gives axis geom run along, \"x\" default orientation expect geom.","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/stat_cumulative_tail.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Plot Cumulative Tail — stat_cumulative_tail","text":"geom_histogram() uses aesthetics geom_bar(); geom_freqpoly() uses aesthetics geom_line().","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/stat_cumulative_tail.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Plot Cumulative Tail — stat_cumulative_tail","text":"calculated 'stat' part layers can accessed delayed evaluation. after_stat(count) number points bin. after_stat(density) density points bin, scaled integrate 1. after_stat(ncount) count, scaled maximum 1. after_stat(ndensity) density, scaled maximum 1. after_stat(width) widths bins.","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/stat_cumulative_tail.html","id":"dropped-variables","dir":"Reference","previous_headings":"","what":"Dropped variables","title":"Plot Cumulative Tail — stat_cumulative_tail","text":"weight binning, weights individual data points (supplied) longer available.","code":""},{"path":[]},{"path":"https://pawelqs.github.io/cevodata/reference/stat_cumulative_tail.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Cumulative Tail — stat_cumulative_tail","text":"","code":"library(ggplot2) data(\"tcga_brca_test\") snvs <- SNVs(tcga_brca_test)  ggplot(snvs, aes(VAF, color = sample_id)) +   stat_cumulative_tail()   ggplot(snvs, aes(VAF, y = stat(y), color = sample_id)) +   stat_cumulative_tail() #> Warning: `stat(y)` was deprecated in ggplot2 3.4.0. #> ℹ Please use `after_stat(y)` instead."},{"path":"https://pawelqs.github.io/cevodata/reference/tcga_brca_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Small TCGA BRCA cevodata dataset — tcga_brca_test","title":"Small TCGA BRCA cevodata dataset — tcga_brca_test","text":"Small TCGA BRCA cevodata dataset","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"4 test samples — test_data","title":"4 test samples — test_data","text":"4 test samples","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/unite_mutation_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite many columns to create mutation_id column — unite_mutation_id","title":"Unite many columns to create mutation_id column — unite_mutation_id","text":"Unite many columns create mutation_id column","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/unite_mutation_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite many columns to create mutation_id column — unite_mutation_id","text":"","code":"unite_mutation_id(snvs, sep = \"-\", include_gene_symbol = FALSE, remove = TRUE)"},{"path":"https://pawelqs.github.io/cevodata/reference/unite_mutation_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite many columns to create mutation_id column — unite_mutation_id","text":"snvs SNVs sep Separator include_gene_symbol Include gene symbol mutation_id? remove Remove united columns?","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/update.cevodata.html","id":null,"dir":"Reference","previous_headings":"","what":"Update cevodata object with values from another object — update.cevodata","title":"Update cevodata object with values from another object — update.cevodata","text":"Update cevodata object values another object","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/update.cevodata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update cevodata object with values from another object — update.cevodata","text":"","code":"# S3 method for cevodata update(object, object2, ...)"},{"path":"https://pawelqs.github.io/cevodata/reference/update.cevodata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update cevodata object with values from another object — update.cevodata","text":"object object update object2 object use ... args, unused now","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/update_cevodata_v2_to_v3.html","id":null,"dir":"Reference","previous_headings":"","what":"Update to cevodata to v3 — update_cevodata_v2_to_v3","title":"Update to cevodata to v3 — update_cevodata_v2_to_v3","text":"Update cevodata v3","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/update_cevodata_v2_to_v3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update to cevodata to v3 — update_cevodata_v2_to_v3","text":"","code":"update_cevodata_v2_to_v3(cd)"},{"path":"https://pawelqs.github.io/cevodata/reference/update_cevodata_v2_to_v3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update to cevodata to v3 — update_cevodata_v2_to_v3","text":"cd object","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/use_purity.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose purity measure — use_purity","title":"Choose purity measure — use_purity","text":"metadata can contain purity measures columns 'purity'. T function can used set 'purity' values using values requested column","code":""},{"path":"https://pawelqs.github.io/cevodata/reference/use_purity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose purity measure — use_purity","text":"","code":"use_purity(cd, name, verbose = get_verbosity())"},{"path":"https://pawelqs.github.io/cevodata/reference/use_purity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose purity measure — use_purity","text":"cd object name Name metadata column chosen purity values verbose Verbose?","code":""}]
